#!/bin/bash

clear

show_main_menu() {
while true; do
clear
echo "#################################################################"
echo "cpu-t-version: june 2023 new interface"
echo "#################################################################"
echo "  ██████ ██████  ██    ██       ████████ "
echo " ██      ██   ██ ██    ██          ██    "
echo " ██      ██████  ██    ██ █████    ██    "
echo " ██      ██      ██    ██          ██    "
echo "  ██████ ██       ██████           ██
echo "#################################################################"
echo "build-latest
echo "cpu-t-github: https://github.com/manoel-linux/cpu-t"
echo "#################################################################"

if [[ $EUID -eq 0 ]]; then
echo " ███████ ██████  ██████   ██████  ██████  ██ "
echo " ██      ██   ██ ██   ██ ██    ██ ██   ██ ██ "
echo " █████   ██████  ██████  ██    ██ ██████  ██ "
echo " ██      ██   ██ ██   ██ ██    ██ ██   ██    "
echo " ███████ ██   ██ ██   ██  ██████  ██   ██ ██ "                                                                                        
echo "#################################################################"
echo "This script should not be executed as a superuser or sudo."
echo "Please run it without superuser privileges or sudo."
echo "#################################################################"
exit 1
fi

echo "(1)> (Kernel), hostname, time, Xorg/Wayland, boot mode (EFI/Legacy)"
echo "(2)> (CPU): model, cores, threads, freq, temp, supp, & unsupp, instruction sets"
echo "(3)> (Memory) Information"
echo "(4)> (Disk info), Linux partitions, total usage, space usage, and free space"
echo "(5)> (PCI Bus) Information"
echo "(6)> (USB Device) Information"
echo "(7)> (GPU info), Driver Type, GPU Name, GPU Temperature, OpenGL Version"
echo "(8)> (NEW) >> (Hard Drive RPM) information"
echo "(9)> (Exit)"
echo "#################################################################"

read -p "Enter your choice: " choice
echo "#################################################################"

case $choice in
1)
show_system_info
;;
2)
show_cpu_info
;;
3)
show_memory_info
;;

4)
show_disk_info
;;
5)
show_expansion_slots_info
;;
6)
show_usb_devices
;;
7)
show_gpu_info
;;
8)
show_rpm_disk_info
;;
9)
exit 0
;;
*)
echo "Invalid choice. Please try again."
echo "#################################################################"
sleep 2
;;
esac
done
}

show_system_info() {
while true; do
clear
echo "#################################################################"
echo "Hostname: $(cat /etc/hostname)"
echo "Kernel Version: $(uname -r)"
echo "Current Date and Time: $(date)"
echo "#################################################################"
echo "Compositing Window Manager: $XDG_SESSION_TYPE"

if [ -d "/sys/firmware/efi" ]; then
echo "Boot mode: UEFI (EFI)"
else
echo "Boot mode: Legacy (BIOS)"
fi
echo "#################################################################"
read -rsn1 -p "Press 'r or R' to reload or press Enter to return to the main menu
#################################################################" key
if [[ $key == "r" || $key == "R" ]]; then
continue
fi

break
done

echo "#################################################################"
}

show_cpu_info() {
while true; do
clear
echo "#################################################################"
echo "CPU Model: $(cat /proc/cpuinfo | grep "model name" | head -n1 | awk -F: '{print $2}' | sed 's/^[ \t]*//')"
echo "CPU Cores/Threads: $(nproc)"
echo "CPU Frequency: $(cat /proc/cpuinfo | grep "cpu MHz" | head -n1 | awk -F: '{print $2}' | sed 's/^[ \t]*//') MHz"
cpu_temp=$(sensors | grep "Core 0:" | awk '{print $3}')
echo "CPU Temperature: $cpu_temp"
echo "#################################################################"
bash -c '
echo "Supported Instructions:"
echo "#################################################################"
supported_instructions=("avx" "avx2" "sse4_1" "sse4_2" "ssse3" "fma3" "cx16" "smap" "aes" "pclmulqdq" "ss" "sse2" "sse" "fma" "cx8" "smep" "rdtscp" "lm")
unsupported_instructions=()

for instruction in "${supported_instructions[@]}"; do
  if grep -q -w $instruction /proc/cpuinfo; then
    echo "- $instruction: Supported"
  else
    unsupported_instructions+=("$instruction")
  fi
done

if [ ${#unsupported_instructions[@]} -ne 0 ]; then
  echo "#################################################################"
  echo "Unsupported Instructions:"
  echo "#################################################################"
  for instruction in "${unsupported_instructions[@]}"; do
    echo "- $instruction: Not supported"
    done
fi
'
echo "#################################################################"

read -rsn1 -p "Press 'r or R' to reload or press Enter to return to the main menu
#################################################################" key
if [[ $key == "r" || $key == "R" ]]; then
continue
fi

break
done

echo "#################################################################"
}

show_memory_info() {
while true; do
clear
echo "#################################################################"
echo "Total Memory: $(awk '/MemTotal/ {printf "%.2f GB", $2/1024/1024}' /proc/meminfo)"
ram_usage=$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2}')
echo "RAM Usage: $ram_usage"
echo "#################################################################"

read -rsn1 -p "Press 'r or R' to reload or press Enter to return to the main menu
#################################################################" key
if [[ $key == "r" || $key == "R" ]]; then
continue
fi

break
done

echo "#################################################################"
}

show_disk_info() {
while true; do
clear
echo "#################################################################"
lsblk
echo "#################################################################"
echo "Total Disk Size: $(df -h | awk '/\/$/ {print $2}')"
echo "Used Disk Space: $(df -h | awk '/\/$/ {print $3}')"
echo "Free Disk Space: $(df -h | awk '/\/$/ {print $4}')"
echo "#################################################################"

read -rsn1 -p "Press 'r or R' to reload or press Enter to return to the main menu
#################################################################" key
if [[ $key == "r" || $key == "R" ]]; then
continue
fi

break
done

echo "#################################################################"
}

show_expansion_slots_info() {
while true; do
clear
echo "#################################################################"
lspci | grep -i "pci bridge" | awk -F" " '{print $1, $2, $3, $4}'
echo "#################################################################"

read -rsn1 -p "Press 'r or R' to reload or press Enter to return to the main menu
#################################################################" key
if [[ $key == "r" || $key == "R" ]]; then
continue
fi

break
done

echo "#################################################################"
}

show_usb_devices() {
while true; do
clear
echo "#################################################################"
lsusb
echo "#################################################################"

read -rsn1 -p "Press 'r or R' to reload or press Enter to return to the main menu
#################################################################" key
if [[ $key == "r" || $key == "R" ]]; then
continue
fi

break
done

echo "#################################################################"
}

show_gpu_info() {
while true; do
clear
echo "#################################################################"
gpu_name=$(lspci -v | grep -i vga | cut -d ":" -f 3)
echo "GPU Name: $gpu_name"
echo "#################################################################"
echo "Video Driver: $(lspci -k | awk '/VGA compatible controller/ {getline; print}' | awk '{print $3}')"
gpu_temp=$(sensors | grep "temp1:" | awk '{ print $2; exit }')
echo "GPU Temperature: $gpu_temp"
glxinfo | grep "OpenGL version string"
echo "#################################################################"

read -rsn1 -p "Press 'r or R' to reload or press Enter to return to the main menu
#################################################################" key
if [[ $key == "r" || $key == "R" ]]; then
continue
fi

break
done

echo "#################################################################"
}

show_rpm_disk_info() {
while true; do
clear
echo "#################################################################"
device="/dev/sda"  
rpm=$(sudo hdparm -I "$device" | grep Rotation | awk '{print $NF}')
if [[ -n "$rpm" ]]; then
echo "Hard drive RPM ($device): $rpm"
else
echo "Unable to retrieve the RPM of the hard drive ($device)"
fi
echo "#################################################################"
device="/dev/vda"  
rpm=$(sudo hdparm -I "$device" | grep Rotation | awk '{print $NF}')
if [[ -n "$rpm" ]]; then
echo "Hard drive RPM ($device): $rpm"
else
echo "Unable to retrieve the RPM of the hard drive ($device)"
fi
echo "#################################################################"

read -rsn1 -p "Press 'r or R' to reload or press Enter to return to the main menu
#################################################################" key
if [[ $key == "r" || $key == "R" ]]; then
continue
fi

break
done

echo "#################################################################"
}

show_main_menu
