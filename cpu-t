#!/bin/sh

clear
echo "#############################################################"
echo "Checking for updates in Void Linux..." 
echo "#############################################################"
if ping -q -c 1 -W 1 voidlinux.org >/dev/null; then
echo "Internet connection established. It is possible to check for updates."
echo "#############################################################"

read -p "Do you want to update your system? (y/n): " choice
echo "#############################################################"
if [[ $choice == "y" || $choice == "Y" ]]; then
sudo xbps-install -Syu -y
else
echo "Skipping system update."
echo "#############################################################"
fi
else
echo "#############################################################"
echo "No internet connection. Unable to check for updates Skipping."
fi
clear
echo "#############################################################"
echo "cpu-t-version: june 2023"
echo "#############################################################"
echo "  ██████ ██████  ██    ██       ████████ "
echo " ██      ██   ██ ██    ██          ██    "
echo " ██      ██████  ██    ██ █████    ██    "
echo " ██      ██      ██    ██          ██    "
echo "  ██████ ██       ██████           ██
echo "#############################################################"
echo "build-latest: 0.0.1"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
echo "cpu-t-github: https://github.com/manoel-linux/cpu-t-void-linux"
echo "#############################################################"
echo "$(date)"
echo "Linux $(uname -r)"
echo "#############################################################"
echo "System Information"
echo "#############################################################"
echo "Hostname: $(hostname)"
echo "Operating System: $(uname -a)"
echo "Current Date and Time: $(date)"
echo "Compositing Window Manager: $XDG_SESSION_TYPE"
if [ -d "/sys/firmware/efi" ]; then
echo "Boot mode: UEFI (EFI)"
else
echo "Boot mode: Legacy (BIOS)"
fi
echo "#############################################################"
echo "CPU Information"
echo "#############################################################"
echo "CPU Model: $(cat /proc/cpuinfo | grep "model name" | head -n1 | awk -F: '{print $2}' | sed 's/^[ \t]*//')"
echo "Number of Cores: $(nproc)"
echo "Number of Threads: $(lscpu | grep -E '^Thread|^CPU\(s\):' | awk '{print $2}')"
echo "CPU Frequency: $(cat /proc/cpuinfo | grep "cpu MHz" | head -n1 | awk -F: '{print $2}' | sed 's/^[ \t]*//') MHz"
echo "#############################################################"
bash -c '
echo "Supported Instructions:"
echo "#############################################################"
supported_instructions=("avx" "avx2" "sse4_1" "sse4_2" "ssse3" "fma3" "cx16" "smap" "aes" "pclmulqdq" "ss" "sse2" "sse" "fma" "cx8" "smep" "rdtscp" "lm")
unsupported_instructions=()

for instruction in "${supported_instructions[@]}"; do
  if grep -q -w $instruction /proc/cpuinfo; then
    echo "- $instruction: Supported"
  else
    unsupported_instructions+=("$instruction")
  fi
done

if [ ${#unsupported_instructions[@]} -ne 0 ]; then
  echo "#############################################################"
  echo "Unsupported Instructions:"
  echo "#############################################################"
  for instruction in "${unsupported_instructions[@]}"; do
    echo "- $instruction: Not supported"
  done
fi
'

echo "#############################################################"
echo "Memory Information"
echo "#############################################################"
echo "Total Memory: $(awk '/MemTotal/ {printf "%.2f GB", $2/1024/1024}' /proc/meminfo)"
echo "Used Memory: $(awk '/MemTotal/ {printf "%.2f GB", ($2-$4)/1024/1024}' /proc/meminfo)"
echo "#############################################################"
echo "Disk Information"
echo "#############################################################"
lsblk
echo "Total Disk Size: $(df -h | awk '/\/$/ {print $2}')"
echo "Used Disk Space: $(df -h | awk '/\/$/ {print $3}')"
echo "Free Disk Space: $(df -h | awk '/\/$/ {print $4}')"
echo "#############################################################"
echo "Network Information"
echo "#############################################################"
echo "Network Interface Name: $(ls /sys/class/net | head -n1)"
echo "#############################################################"
echo "Expansion Slots Information"
echo "#############################################################"
lspci | grep -i "pci bridge" | awk -F" " '{print $1, $2, $3, $4}' | while read -r slot; do
  echo "- $slot"
done
echo "#############################################################"
echo "USB Devices"
echo "#############################################################"
lsusb
echo "#############################################################"
echo "VGA Information"
echo "#############################################################"
lspci | grep -i vga
echo "Video Driver: $(lspci -k | awk '/VGA compatible controller/ {getline; print}' | awk '{print $3}')"
glxinfo | grep "OpenGL version string"
echo "#############################################################"
